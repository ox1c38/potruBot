import type { Route } from "../+types/root";

export const action = async ({ request, context }: Route.ActionArgs) => {
  if (request.method !== "POST") {
    return new Response("Method Not Allowed", { status: 405 });
  }

  try {
    const update: any = await request.json();
    console.log("–ü–æ–ª—É—á–µ–Ω update:", JSON.stringify(update, null, 2));

    if (!update.message) {
      return new Response("No message in update", { status: 400 });
    }

    const chatId = update.message.chat.id;
    const text = update.message.text || "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞";

    let replyText = `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${text}\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.`;

    let replyMarkup = {
      reply_markup: {
        keyboard: [
          [{ text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text.startsWith("/start")) {
      replyText = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ –í–∞–º –Ω—É–∂–Ω–æ:";
      replyMarkup = {
        reply_markup: {
          keyboard: [
            [{ text: "–†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ (–ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫)" }],
            [{ text: "–†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ (–†–§)" }],
            [{ text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        }
      };
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "–†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ (–ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫)"
    else if (text === "–†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ (–ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫)") {
      replyText = `‚úîÔ∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–∏–∑–Ω–µ—Å —Å –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –≥–æ—Ç–æ–≤—ã–º —Å–∞–π—Ç–æ–º –∏ —Ä–µ–∫–ª–∞–º–æ–π.\n\n‚úîÔ∏è –ü–æ–ª–Ω–∞—è –≥–∏–±–∫–æ—Å—Ç—å –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å\n–ú–µ–Ω—è–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç ‚Äî –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ä–µ–∫–ª–∞–º–∞ –≤ –¥–µ–ª–µ.\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª—é–±–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ –∑–∞–¥–∞—á.\n\n‚úîÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã.\n\n–û–ø–ª–∞—Ç–∞: –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å Stripe.\n\nüîπ [–ö—É–ø–∏—Ç—å](https://storelikepinterest.pages.dev/init-payment/product-1/)`;
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "–†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ (–†–§)"
    else if (text === "–†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ (–†–§)") {
      replyText = `[ETSTudio38Bot](https://t.me/ETSTudio38Bot)`;
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    else if (text === "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
      replyText = "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
      replyMarkup = {
        reply_markup: {
          keyboard: [
            [{ text: "–†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ (–ó–∞—Ä—É–±–µ–∂–Ω—ã–π —Ä—ã–Ω–æ–∫)" }],
            [{ text: "–†–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ (–†–§)" }],
            [{ text: "–ü–æ–º–æ—â—å" }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        }
      };
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "–ü–æ–º–æ—â—å"
    else if (text === "–ü–æ–º–æ—â—å") {
      replyText = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞–ª–æ\n/help - –°–ø—Ä–∞–≤–∫–∞";
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
    const response = await fetch(
      `https://api.telegram.org/bot${context.cloudflare.env.TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: chatId,
          text: replyText,
          parse_mode: "Markdown", // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º Markdown
          ...replyMarkup
        })
      }
    );

    console.log("–û—Ç–≤–µ—Ç –æ—Ç Telegram:", await response.json());
    return new Response("OK", { status: 200 });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Webhook:", error);
    return new Response("Internal Server Error", { status: 500 });
  }
};

export default function TelegramWebhook() {
  return <p>Telegram Webhook Handler</p>;
}
